server:
  port: 5001
spring:
  application:
    name: team-service
  profiles:
    active: dev
  cloud:
    config:
      uri: http://${CONFIGSERVER:localhost}:7071
      failFast: true
      retry:
        initialInterval: 3000
        multiplier: 1.3
        maxInterval: 10000
        maxAttempts: 20
pulse:
  logstash:
    host: ${LOGSTASH:localhost}:6000
logging:
  level:
    com.netflix: WARN
    org.springframework.web: WARN
    com.sportconnect.teamsservice: DEBUG


# set up initialize for resilience4j implementation
resilience4j.circuitbreaker:
  instances:
    TeamsService:
      registerHealthIndicator: true
      ringBufferSizeInClosedState: 5
      ringBufferSizeInHalfOpenState: 3
      waitDurationInOpenState: 10s
      failureRateThreshold: 50
      recordExceptions:
        - org.springframework.web.client.HttpServerErrorException
        - java.io.IOException
        - java.util.concurrent.TimeoutException
        - org.springframework.web.client.ResourceAccessException
#    organizationService:
#      registerHealthIndicator: true
#      ringBufferSizeInClosedState: 6
#      ringBufferSizeInHalfOpenState: 4
#      waitDurationInOpenState: 20s
#      failureRateThreshold: 60

resilience4j.ratelimiter:
  instances:
    TeamsService:
      limitForPeriod: 5
      limitRefreshPeriod: 5000
      timeoutDuration: 1000ms

resilience4j.retry:
  instances:
    retryTeamsService:
      maxRetryAttempts: 5
      waitDuration: 10000
      retry-exceptions:
        - java.util.concurrent.TimeoutException

resilience4j.bulkhead:
  instances:
    bulkheadTeamsService:
      maxWaitDuration: 2ms
      maxConcurrentCalls: 20

#Equation to proper sizing of custom thread pool
#(requests per second at peak when the service is healthy * 99th percentile latency in seconds) + small amount of extra threads for overhead
resilience4j.thread-pool-bulkhead:
  instances:
    bulkheadTeamsService:
      maxThreadPoolSize: 1
      coreThreadPoolSize: 1
      queueCapacity: 1
      keepAliveDuration: 20ms
